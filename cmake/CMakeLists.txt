cmake_minimum_required(VERSION 3.1.0)

project(UltraVNC)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0 -Wno-write-strings")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0 -Wno-write-strings -Wno-conversion-null")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0 -Wno-write-strings -Wno-deprecated-non-prototype -Wno-knr-promoted-parameter")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0 -Wno-write-strings -Wno-conversion-null -Wno-parentheses -Wno-dangling-else -Wno-invalid-source-encoding")
endif()

option(asan "Build with address sanitizer enabled.")
if (asan)
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer")
  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /fsanitize=address")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fsanitize=address")
  endif()
endif()

add_subdirectory(libzstd)
add_subdirectory(libudt4)
add_subdirectory(libudtcloud)
add_subdirectory(uvnc_settings)
add_subdirectory(vnchooks)

option(ENABLE_SHARED "Build shared libraries" FALSE)
set(JPEG_FOR_UVNC 1)
add_subdirectory(../libjpeg-turbo-win libturbojpeg)

add_subdirectory(vncviewer)
add_subdirectory(winvnc)
